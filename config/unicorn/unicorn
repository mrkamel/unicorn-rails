#! /bin/sh
### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Unicorn initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Benjamin Vetter <vetter@plainpicture.de>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

ENVIRONMENT="production"
WWW_ROOT="/var/www/project"

UNICORN_PIDFILE="$WWW_ROOT/tmp/pids/unicorn.pid"
BUNDLE_COMMAND="/var/lib/gems/1.8/bin/bundle"
UNICORN_CONFIG="config/unicorn/unicorn.rb"
UNICORN_COMMAND="unicorn_rails"
PIDFILE="/tmp/unicorn.pid"
USER="www-data"
GROUP="www-data"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  echo "Starting unicorn."

  /sbin/start-stop-daemon --start --chuid $USER --group $GROUP --user $USER --pidfile $PIDFILE --make-pidfile --background --chdir $WWW_ROOT --exec $BUNDLE_COMMAND -- exec $UNICORN_COMMAND -c $UNICORN_CONFIG -E $ENVIRONMENT
  /bin/sleep 3
  /bin/chown $USER:$GROUP $PIDFILE

  return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred

  if [ -f $UNICORN_PIDFILE ]; then
    echo "Stopping unicorn."

    /bin/kill -s SIGQUIT "`/bin/cat $UNICORN_PIDFILE`"
  else
    echo "Unicorn is not running."
  fi

  return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #

  if [ -f $UNICORN_PIDFILE ]; then
    CURRENT_PID="`/bin/cat $UNICORN_PIDFILE`"

    echo "Reloading unicorn."

    /bin/kill -s SIGUSR2 $CURRENT_PID

    # Unicorn itself or the before_fork hook should send a QUIT
    # signal to the old master.
  else
    echo "Unicorn is not running."
  fi

  return 0
}

case "$1" in
  start)
  do_start
  ;;
  stop)
  do_stop
  ;;
  status)
  ;;
  reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  do_reload
  ;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  do_stop
  /bin/sleep 3
  do_start
  ;;
  *)
  exit 3
  ;;
esac

:
